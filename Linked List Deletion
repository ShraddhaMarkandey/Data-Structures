#include<stdio.h>
#include<stdlib.h>
struct node 
{
    int data;
    struct node *next;
};
//Printing the nodes of a linked list
void traverseLinkedList(struct node *ptr)
{
    while(ptr!=NULL)
    {
        printf("Element: %d\n",ptr->data);
        ptr=ptr->next;
    }
}
//Case 1:Deleting the first node from Linked List
struct node* deleteAtFirst(struct node *head)
{
    struct node *ptr=head;
    head=head->next;
    free(ptr);
    return head;
}
//Case 2:Deleting the node at a given index in Linked List
struct node* deleteAtIndex(struct node *head,int index)
{
    struct node *p=head;
    struct node *q=p->next;
    for(int i=0;i<index-1;i++)
    {
        p=p->next;
        q=q->next;
    }
    p->next=q->next;
    free(q);
    return head;
}
//Case 3:Deleting the last node of the Linked List
struct node* deleteAtLast(struct node *head)
{
    struct node *p=head;
    struct node *q=head->next;
    while(q->next!=NULL)
    {
        p=p->next;
        q=q->next;
    }
    p->next=NULL;
    free(q);
    return head;
}
//Case 4:Deleting the node when value is given
struct node* deleteAtVal(struct node *head,int val)
{
    struct node *p=head;
    struct node *q=head->next;
    while(q->data!=val&&q->next!=NULL)
    {
        p=p->next;
        q=q->next;
    }
    if(q->data==val)
    {
        p->next=q->next;
        free(q);
    }
    return head;
}

int main()
{
    struct node *head,*second,*third,*fourth;
    head=(struct node*)malloc(sizeof(struct node));
    second=(struct node*)malloc(sizeof(struct node));
    third=(struct node*)malloc(sizeof(struct node));
    fourth=(struct node*)malloc(sizeof(struct node));
    head->data=1;
    head->next=second;
    second->data=2;
    second->next=third;
    third->data=3;
    third->next=fourth;
    fourth->data=4;
    fourth->next=NULL;
    printf("Linked List before deletion:\n");
    traverseLinkedList(head);
    printf("Linked List after deletion:\n");
    //head=deleteAtFirst(head);
    //head=deleteAtIndex(head,2);
    //head=deleteAtLast(head);
    head=deleteAtVal(head,3);
    traverseLinkedList(head);
    return 0;
}
